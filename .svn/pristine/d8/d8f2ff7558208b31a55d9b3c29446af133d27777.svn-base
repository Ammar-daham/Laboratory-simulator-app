package simu.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import controller.IKontrolleri;
import controller.Kontrolleri;
import eduni.distributions.Negexp;
import eduni.distributions.Normal;
import eduni.distributions.Uniform;
import simu.framework.Kello;
import simu.framework.Moottori;
import simu.framework.Saapumisprosessi;
import simu.framework.Tapahtuma;

public class OmaMoottori extends Moottori{
	
	private Saapumisprosessi saapumisprosessi;
	
	int c1 = 0;
	int c2 = 0;
	int c3 = 0;
	double veriKoeAktiiviAika;
	String testing = "";
	public static final int JONOLKM=4;
	public static final int MAXJONOPITUUS=18;
	 int[] jonossa = new int[JONOLKM];
	
	Kontrolleri kontrolleri;
	
	public OmaMoottori(Kontrolleri kontrolleri){
		super(kontrolleri);
		palvelupisteet = new Palvelupiste[4];
		this.kontrolleri=kontrolleri;
	
		palvelupisteet[0]=new Palvelupiste(new Normal(kontrolleri.getRespaika(),kontrolleri.getRespaVarianssi()), tapahtumalista, TapahtumanTyyppi.DEP1);	
		palvelupisteet[1]=new Palvelupiste(new Normal(kontrolleri.getVerikoaika(),kontrolleri.getVerikovarianssi()), tapahtumalista, TapahtumanTyyppi.DEP2);
		palvelupisteet[2]=new Palvelupiste(new Normal(kontrolleri.getRontgenAika(),kontrolleri.getRontgenVarianssi()), tapahtumalista, TapahtumanTyyppi.DEP3);
		palvelupisteet[3]=new Palvelupiste(new Normal(kontrolleri.getNayteAika(),kontrolleri.getNayteVarianssi()), tapahtumalista, TapahtumanTyyppi.DEP4);
		
		
		saapumisprosessi = new Saapumisprosessi(new Uniform(kontrolleri.saapumisvÃ¤liaika()-1,kontrolleri.saapumisvÃ¤liaika()), tapahtumalista, TapahtumanTyyppi.ARR1);

	}

	
	@Override
	protected void alustukset() {
		saapumisprosessi.generoiSeuraava(); // Ensimmï¿½inen saapuminen jï¿½rjestelmï¿½ï¿½n
	}
	
	protected int generoiSatunaispalvelu() {
		Uniform ui = new Uniform(1, 10);
		int luku = (int)(ui.sample());
		if(luku >= 1 && luku <= 3) {
			return 1;
		} else if(luku >= 4 && luku <= 6) {
			return 2;
		}else {
		return 3;
		}
	}
	
	
	
	
	@Override
	protected void suoritaTapahtuma(Tapahtuma t){  // B-vaiheen tapahtumat
		
		Asiakas a;
		switch (t.getTyyppi()){
						//lisÃ¤Ã¤ respan jonoon
			case ARR1: palvelupisteet[0].lisaaJonoon(new Asiakas());	
				       saapumisprosessi.generoiSeuraava();
				       //visualisointi
				       if (jonossa[0]<MAXJONOPITUUS) {
							kontrolleri.naytaAsiakas(0,++jonossa[0]);
						};
				break;
				//Respa ,jono 0
			case DEP1: a = palvelupisteet[0].otaJonosta();
						int seuraavaPalvelu=generoiSatunaispalvelu();
		   	   			palvelupisteet[seuraavaPalvelu].lisaaJonoon(a);
		   	   			//seuraavan palvelun jonon visualisointi
		   	   		if (jonossa[seuraavaPalvelu]<MAXJONOPITUUS) {
						kontrolleri.naytaAsiakas(seuraavaPalvelu,++jonossa[seuraavaPalvelu]);
					}
		   	   		//respasta poisto samalla
		   	   		if(jonossa[0]>0) {
		   	   			kontrolleri.piilotaAsiakas(0, jonossa[0]--);
		   	   			};
		   	   			break;
				//verikoe	jono 1
			case DEP2: a = palvelupisteet[1].otaJonosta();
					   a.setPoistumisaika(Kello.getInstance().getAika());
					   //jonosta poisto
				   	 if(jonossa[1]>0) {
			   	   			kontrolleri.piilotaAsiakas(1, jonossa[1]--);
			   	   			}
				   	   	a.raportti(); 
				   	   	c1++;
				   	   	break;
			    //Rong jono 2
			case DEP3: a = palvelupisteet[2].otaJonosta();
					   a.setPoistumisaika(Kello.getInstance().getAika());
					   //jonosta poisto
				   	   if(jonossa[2]>0) {
		   	   			kontrolleri.piilotaAsiakas(2, jonossa[2]--);
		   	   			}
			           a.raportti(); 
			           c2++;
			           break;  
			     //Nayte jono 3
			case DEP4: a = palvelupisteet[3].otaJonosta();
					   a.setPoistumisaika(Kello.getInstance().getAika());
					   //jonosta poisto
					   if(jonossa[3]>0) {
			   	   			kontrolleri.piilotaAsiakas(3, jonossa[3]--);
			   	   			}
			           a.raportti(); 
			           c3++;
			           break;
		}	
	}

	
	@Override
	protected void tulokset() {	
		
		Connection conn = null;
		final String URL = "jdbc:mariadb://localhost/laboratorio";
		final String USERNAME = "root";
		final String PWD = "Aljewary89";
		
		try {
			conn = DriverManager.getConnection(URL, USERNAME, PWD);
		}catch(SQLException e) {
			do {
				System.err.println("Viesti: " + e.getMessage());
				System.err.println("Virhekoodi: " + e.getErrorCode());
				System.err.println("SQL-tilakoodi: " + e.getSQLState());
			}while(e.getNextException() != null);
			System.exit(-1); 
		}
		
		try(PreparedStatement createStm = conn.prepareStatement
				("INSERT INTO labratorio VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")){
			
			createStm.setInt(1, 1);
			createStm.setDouble(2, Kello.getInstance().getAika());
			createStm.setInt(3, c1+c2+c3);
			createStm.setInt(4, c1);
			createStm.setInt(5, c2);
			createStm.setInt(6, c3);
			createStm.setDouble(7, palvelupisteet[0].getAktiiviaika());
			createStm.setDouble(8, palvelupisteet[1].getAktiiviaika());
			createStm.setDouble(9, palvelupisteet[2].getAktiiviaika());
			createStm.setDouble(10, palvelupisteet[3].getAktiiviaika());
			createStm.setDouble(11, palvelupisteet[0].getAktiiviaika()/(c1+c2+c3));
			createStm.setDouble(12, palvelupisteet[1].getAktiiviaika()/(c1+c2+c3));
			createStm.setDouble(13, palvelupisteet[2].getAktiiviaika()/(c1+c2+c3));
			createStm.setDouble(14, palvelupisteet[3].getAktiiviaika()/(c1+c2+c3));
			System.out.println("before");
			createStm.executeUpdate();
			System.out.println("before");
		}catch(SQLException e) {
				do {
					System.err.println("Datan luominen epäonnistui.");
				} while (e.getNextException() != null);
			}
			
		System.out.println("Simulointi paattyi kello " + Kello.getInstance().getAika());
		System.out.println("Respa " + (c1 + c2 + c3));
		System.out.println( "veri " + c1 + "\n" + "Rong " +  c2 + "\n" + "nï¿½yte " + c3);
		System.out.println("respa kokeen aktiiviaika " + palvelupisteet[0].getAktiiviaika());
		System.out.println("veri kokeen aktiiviaika " + palvelupisteet[1].getAktiiviaika());
		System.out.println("rontgen kokeen aktiiviaika " + palvelupisteet[2].getAktiiviaika());
		System.out.println("nayte kokeen aktiiviaika " + palvelupisteet[3].getAktiiviaika());
		System.out.println("Keksimaarainen respa palveluaika"+palvelupisteet[0].getAktiiviaika()/(c1+c2+c3));
		System.out.println("Keskimaarainen veri palveluaika"+palvelupisteet[1].getAktiiviaika()/(c1));
		System.out.println("Keskimaarainen rontgen palveluaika"+palvelupisteet[2].getAktiiviaika()/(c2));
		System.out.println("Keskimaarainen nayte "+palvelupisteet[3].getAktiiviaika()/(c3));
	}

	
}